<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
                           
       default-init-method="initialize"
       default-destroy-method="destroy">

    <!--
    This is a map of transition rules that guide the behavior of the MFA flow
    and controls how factors are sequenced, skipped, etc. The key of each entry
    is the name of the step/flow out of which control is passing. The starting
    rule has an empty key.
    
    Each entry is a bean inherited from "shibboleth.authn.MFA.Transition". Per
    the Javadoc for net.shibboleth.idp.authn.MultiFactorAuthenticationTransition:
            
        p:nextFlow (String)
            - A flow to run if the previous step signaled a "proceed" event, for simple
                transitions.
                
        p:nextFlowStrategy (Function<ProfileRequestContext,String>)
            - A function to run if the previous step signaled a "proceed" event, for dynamic
                transitions. Returning null ends the MFA process.
            
        p:nextFlowStrategyMap (Map<String,Object> where Object is String or Function<ProfileRequestContext,String>)
            - Fully dynamic way of expressing control paths. Map is keyed by a previously
                signaled event and the value is a flow to run or a function to
                return the flow to run. Returning null ends the MFA process.
                
    When no rule is provided, there's an implicit "null" that ends the MFA flow
    with whatever event was last signaled. If the "proceed" event from a step is
    the final event, then the MFA process attempts to complete itself successfully.
    -->

    <!-- Basic Login.  1 or 2-factor -->
    <util:map id="shibboleth.authn.MFA.TransitionMap">

        <!-- Always start with a basic password authn -->
        <entry key="">
            <bean parent="shibboleth.authn.MFA.Transition" p:nextFlow="authn/Password" />
        </entry>
        
        <!-- After authn/Password, next rule runs the Duo (uwduo) login flow as needed. -->
        <entry key="authn/Password">
            <bean parent="shibboleth.authn.MFA.Transition" p:nextFlowStrategy-ref="checkSecondFactorNeeded" />
        </entry>

        <!-- Following a Duo flow, check the 'remember me' toggle.  If duo login failed, it will be rerun. -->
        <entry key="authn/uwduo">
            <bean parent="shibboleth.authn.MFA.Transition" p:nextFlowStrategy-ref="checkRememberMe" />
        </entry>

        <!-- Run crn selections through the second factor checker.  -->
        <entry key="authn/crn-select">
            <bean parent="shibboleth.authn.MFA.Transition" p:nextFlowStrategy-ref="checkSecondFactorNeeded" />
        </entry>

        <!-- just for debug logging 
        <entry key="authn/duo-bypass">
            <bean parent="shibboleth.authn.MFA.Transition" p:nextFlowStrategy-ref="completeDuoBypass" />
        </entry>
         -->

        <!-- This should never happen.  (catch someone bypassing aws 2fa?) -->
        <entry key="authn/needduo">
            <bean parent="shibboleth.authn.MFA.Transition" p:nextFlow="authn/needduo" />
        </entry>

        <!-- An implicit final rule will return whatever the final flow returns. -->
    </util:map>

    <!-- After a successful Password flow, see if 2nd factor is needed.
         1) Token authn requested
         2) User opted into mfa and has no 'remember' cookie
       -->

    <bean id="checkSecondFactorNeeded" parent="shibboleth.ContextFunctions.Scripted" factory-method="inlineScript"
          p:customObject-ref="uw.ComboBean">
       <constructor-arg>
           <value>
           <![CDATA[
               var AuthnContextClassRefPrincipal = Java.type("net.shibboleth.idp.saml.authn.principal.AuthnContextClassRefPrincipal");
               var Cookie = Java.type("javax.servlet.http.Cookie");
               var System = Java.type("java.lang.System");
               logger = Java.type("org.slf4j.LoggerFactory").getLogger("edu.washington.shibboleth");

               request = custom.get("request");
               webget = custom.get("webget");
               autotoken = custom.get("autotoken");
               cookies = request.getCookies();
               nextFlow = null;
               need2f = null;
               hasCookie = "f";
               
               // Get the username
               CanonicalUsernameLookupStrategy = Java.type("net.shibboleth.idp.session.context.navigate.CanonicalUsernameLookupStrategy");
               culs = new CanonicalUsernameLookupStrategy();
               username = culs.apply(input);
               logger.debug("username = " + username);

               // Get a scope for variable transfer to views and beans
               requestContext = input.getSubcontext("net.shibboleth.idp.profile.context.SpringRequestContext").getRequestContext();
               conversationScope = requestContext.getConversationScope();

               conversationScope.put("remember_checked", null);
               conversationScope.put("duo_username", null);
               conversationScope.put("show_duo_username", null);

               /* Check cookies.  See if the user has a long-term 2fa session.
                */

               for ( i=0; cookies!=null && i< cookies.length; i++ ) {
                  cookie = cookies[i];
                  if (cookie.getName().equals("%{idp.uw.mfa-remember-cookie}" + username)) {
                     try {
                        val = custom.get("sealer").unwrap(cookie.getValue());
                        logger.debug("rememberme cookie value=" + val);
                        vals = val.split("|");
                        if (vals[1].equals(username)) hasCookie = "t";
                        conversationScope.put("remember_checked", "t");
                     } catch (e) {
                        if (e instanceof Java.type("net.shibboleth.utilities.java.support.security.DataExpiredException")) {
                            logger.debug("cookie has expired");
                            hasCookie = "e";
                            conversationScope.put("remember_checked", "t");
                        } else {
                           logger.debug(e);
                        }
                     }
           
                  }
               }
 
               /* See if token was requested, configured, or needed.
                     If this is an auto-2fa request AND a corresponding authz groups exists for the RP:
                        If the user is a member: 2fa required
                        Else no 2fa needed
                     Else 2fa required
                */

               // function to generate a group name from an entity id
               var rpToGroupUrlBase = function(id) {
                   // amazon 'special'
                   if (id.equals("urn:amazon:webservices")) return "%{idp.uw.aws-optin-2fa}"

                   // else use the id's dns part
                   if (id.indexOf("http://")==0) id = id.substring(7);
                   else if (id.indexOf("https://")==0) id = id.substring(8);
                   else return ""  // must have 'standard' id
                   if (id.indexOf("/")>0) id = id.substring(0,id.indexOf("/"));
                   // logger.debug("fixed dns: " + id);
                   return "%{idp.uw.2fa-gws-urlbase}" + id + "/effective_member/"
               }

                 
               authCtx = input.getSubcontext("net.shibboleth.idp.authn.context.AuthenticationContext");
               rpCtx = authCtx.getSubcontext("net.shibboleth.idp.authn.context.RequestedPrincipalContext");
                     
               // See if 2fa requested.
               if (rpCtx != null) {
                  rps = rpCtx.getRequestedPrincipals();
                  for (i=0; i<rps.size(); i++) {
                     rpname = rps.get(i).getName();
                     if (rpname.equals("https://refeds.org/profile/mfa") || 
                         rpname.equals("urn:oasis:names:tc:SAML:2.0:ac:classes:TimeSyncToken")) { 
                           logger.debug("2fa requested by " + rpname);
                           need2f = "t";
                           break;
                     }
                  }
                }
         
                var rpCtx = input.getSubcontext("net.shibboleth.idp.profile.context.RelyingPartyContext");
                var rpCtxId = rpCtx.getConfiguration().getId();
                rpid = rpCtx.relyingPartyId;

                // See if 2fa is auto configured for this rp

                if (need2f == null) {
                   /* dynamic list by local file */
                   var Files = Java.type("java.nio.file.Files");
                   var Paths = Java.type("java.nio.file.Paths");
                   var autos = Files.readAllLines(Paths.get("/data/local/idp-3.4/conf/authn/autotoken.txt"));
                   // logger.debug(rpid);
                   for (i=0; i<autos.size(); i++) {
                      // logger.debug("[[" + autos.get(i).trim() + "]]");
                      if (rpid.startsWith(autos.get(i).trim())) {
                         logger.debug("autotoken rp match: " + rpid);
                         need2f = "t";
                         break;
                       }
                   }


                   // If 2fa auto triggered, see if user really needs it ( config token + group exists + not a member = no 2fa needed )
                   if ( need2f == 't' ) {
                      try {
                          url = rpToGroupUrlBase(rpid) + username;
                          logger.debug("member url = " + url);
                          rsp = webget.getResource(url)
                          // logger.debug("rsp = " + rsp);
                          if (rsp != null) {
                              var Json = Java.type("javax.json.Json");
                              var SR = Java.type("java.io.StringReader");
                              var reader = Json.createReader(new SR(rsp));
                              var jresp = reader.readObject();
                              reader.close();
                              // distinguish between 'group not found'=>need 2fa and 'member not found'=>no 2fa
                              errors = jresp.getJsonArray("errors");
                              if (errors != null && errors.size()>0) {
                                 substat = errors[0].getString("subStatus");
                                 logger.debug("substatus = " + substat);
                                 if (substat.equals("m404")) {
                                    logger.debug("group exists. member not found");
                                    need2f = null;
                                 }
                              }
                          }
                      } catch (e) {
                          logger.warn("Member request failed for user '{}': {}", username, e);
                      }
                   }
                }

              /** will by OBE when everyone gets 2fa all the time
                // See if user opted in to 2nd factor and has no long-term session
                if (need2f == null && hasCookie != "t") {
                   // later
                   // xml = webget.getResource("%{idp.uw.mfa-optin-urlbase}" + username);
                   xml = null;
                   if (xml != null) {
                      if (xml.indexOf("class=\"member\"") > -1 ) {
                         logger.info("user opted into 2f");
                         need2f = "t";
                         conversationScope.put("askRemember", "y");
                         // if (hasCookie=="e") conversationScope.put("askRememberDefautl", "t");
                      }
                   }
                }
              **/

  
                // See if user has remember-me
                if (need2f != null && hasCookie == "t") {
                   if (authCtx.isForceAuthn()) {
                      logger.info("2FA: force authn.  skipping cookie test");
                   } else {
                      logger.info("2FA: user has cookie.  skipping");
                      need2f = null;   
                      nextFlow = "authn/duo-bypass";
                   }
                }

               // If 2nd factor needed, several choices
               // Complicated by CRN possibilities
               // If this is a return from crn selector duo_crn_username will be set

               if (need2f != null) {
                  var Json = Java.type("javax.json.Json");
                  var SR = Java.type("java.io.StringReader");
                  var Http = Java.type("com.duosecurity.client.Http");

                  // function to test if a userid has Duo enrollment
                  var userHasDuo = function(id) {
                     try {
                        var request = new Http("POST", "%{uw.idp.duo.api.apiHost:none}", "/auth/v2/preauth", 10);
                        request.addParam("username", id);
                        request.signRequest("%{uw.idp.duo.api.integrationKey:none}", "%{uw.idp.duo.api.secretKey:none}");

                        ret = request.executeHttpRequest();
                        var rsp = ret.body().string();
                        logger.debug("duoresponse body = {}", rsp);
                        var reader = Json.createReader(new SR(rsp));
                        var jresp = reader.readObject();
                        reader.close();
                        var d_stat = jresp.getString("stat");
                        response = jresp.getJsonObject("response");
                        var d_result = response.getString("result");
                        logger.debug("duo query result = {}", d_result);
                        if (d_result.equals("auth") && d_stat.equals("OK")) return true;
                     } catch (e) {
                        logger.warn("Duo request failed for user '{}': {}", id, e);
                     }
                     return false;
                  }

                  // function to get a TAWS preauth array
                  var getTawsPreauth = function(id) {
                     try {
                        rsp = webget.getResource("%{idp.uw.token-preauth-urlbase:none}" + id);
                        logger.debug("taws rsp=" + rsp);
                        var reader = Json.createReader(new SR(rsp));
                        var jresp = reader.readObject();
                        reader.close();
                        return jresp.getJsonArray("preauth");
                     } catch (e) {
                        logger.warn("Taws request failed for user '{}': {}", id, e);
                     }
                     return null;
                  }

                  // function to see if taws resp has vendor
                  var hasTawsVendor = function(devs, vendor, flow) {
                     for ( i=0; i< devs.size(); i++ ) {
                        dev = devs.getJsonObject(i);
                        if (dev.getString("vendor","").equals(vendor) && dev.getString("result","").equals("auth") ) {
                           duser = dev.getString("user");
                           logger.info("Found " + vendor + " identity for " + duser);
                           conversationScope.put("duo_username", duser);
                           return flow;
                        }
                     }
                     return null;
                  }

                  try {
                     // most users will have Duo
                     // in case of CRN usage, duo_realuser=logging in user,  duo_username=id that has duo identity
                     conversationScope.put("duo_realuser", username);
                     if (userHasDuo(username)) {
                        logger.info("Choosing Duo for 2f");
                        conversationScope.put("duo_username", username);
                        nextFlow = "authn/uwduo";
                     } else {
                        // user may have CRN entry
                        // this stuff runs rarely
                        try {
                           var devs = getTawsPreauth(username);
                           var Vector = Java.type("java.util.Vector");
                           var String = Java.type("java.lang.String");
                           conversationScope.put("show_duo_username", true);

                           // first possibility: simple single CRN.  We get back user with duo 
                           // this is the more common case

                           nextFlow = hasTawsVendor(devs, "duo", "authn/uwduo");

                           // other possibility: bunch of CRN 
                           // this happens once in a blue moon
                           if (nextFlow == null) {
                              for ( i=0; i< devs.size(); i++ ) {
                                 prompt = dev.getJsonObject("prompt")
                                 if (prompt==null) continue;
                                 duser = conversationScope.get("duo_crn_username");  // in case we've come back from a crn selection
                                 logger.info("multiple crn pre-choice: " + duser);
                                 crns = prompt.getJsonObject("crns");
                                 logger.info(crns);
                                 if (crns==null) continue
                                 logger.info("multiple crn to choose from");
                                 // save username to the display page
                                 conversationScope.put("real_user", username);
                                 crnlist = new Vector();
                                 for ( j=1; j<crns.size(); j++) {
                                    crn = crns.getString(j, null);
                                    if (crn==null) break;
                                    if (crn.equals(duser)) {  // if already selected, go with it
                                        var pdevs = getTawsPreauth(duser);
                                        nextFlow = hasTawsVendor(pdevs, "duo", "authn/uwduo");
                                        if (nextFlow != null) break;
                                    }
                                    logger.info("adding: " + crn);
                                    crnlist.add(crn);
                                 }
                                 conversationScope.put("crnlist", crnlist);
                                 if (nextFlow==null) nextFlow = "authn/crn-select"
                              }
                           }
                        } catch (e) {
                           logger.warn("Taws CRN error for user '{}': {}", username, e);
                           conversationScope.put("duo_username", username);
                           nextFlow = "authn/uwduo";
                        }
                     }
                  } catch (e) {
                     logger.warn("Duo requests failed for user '{}': {}", username, e);
                  }

                  // If no 2f found, suggest duo enrollment - form w/o iframe
                  if (nextFlow == null) {
                     logger.info("Using Duo for 2f notification.");
                     nextFlow = "authn/needduo";
                  }
               } // end need2f

               nextFlow;
           ]]>
       </value>
       </constructor-arg>
   </bean>

    <!-- Finish A Duo authn.  Check for rememberme -->
    <bean id="checkRememberMe" parent="shibboleth.ContextFunctions.Scripted" factory-method="inlineScript"
          p:customObject-ref="uw.ComboBean">
       <constructor-arg>
           <value>
           <![CDATA[
               var AuthnContextClassRefPrincipal = Java.type("net.shibboleth.idp.saml.authn.principal.AuthnContextClassRefPrincipal");
               logger = Java.type("org.slf4j.LoggerFactory").getLogger("edu.washington.shibboleth");
               logger.debug("checkRememberMe");
               nextFlow = null;

               // if duo failed, rerun
               requestContext = input.getSubcontext("net.shibboleth.idp.profile.context.SpringRequestContext").getRequestContext();
               currentEvent = requestContext.getCurrentEvent().toString();
               logger.debug("duo status = " + currentEvent);
               if (currentEvent.equals("ReselectFlow") || currentEvent.equals("NoCredentials")) nextFlow = "authn/uwduo";

               if (nextFlow==null) {
                  CanonicalUsernameLookupStrategy = Java.type("net.shibboleth.idp.session.context.navigate.CanonicalUsernameLookupStrategy");
                  culs = new CanonicalUsernameLookupStrategy();
                  username = culs.apply(input);
                  logger.debug("username = " + username);
   
                  // set or delete cookie, depends on rememberme checked

                  remme = requestContext.getConversationScope().get("rememberme");
                  cname = requestContext.getConversationScope().get("duo_realuser");
                  if (!username.equals(cname)) {
                     logger.info("using cookie for: " + cname);
                     username = cname;
                  }

                  var maxAge = 0;
                  if (remme!=null && remme.equals("y")) maxAge = %{idp.uw.mfa-remember-seconds}*10;
                  var Random = Java.type("java.util.Random");
                  var Cookie = Java.type("javax.servlet.http.Cookie");
                  var System = Java.type("java.lang.System");
                  tdata = new Random().nextInt(1000000) + "|" + username;
                  cdata = custom.get("sealer").wrap(tdata, System.currentTimeMillis() + %{idp.uw.mfa-remember-seconds}*1000);
                  cookie = new Cookie("%{idp.uw.mfa-remember-cookie}" + username, cdata);
                  cookie.setPath("/");
                  cookie.setSecure(true);
                  cookie.setHttpOnly(true);
                  cookie.setMaxAge(maxAge);
                  response = custom.get("response");
                  response.addCookie(cookie);
               }
               nextFlow;
           ]]>
       </value>
       </constructor-arg>
   </bean>

    <!-- this just for logging debug 
    <bean id="completeDuoBypass" parent="shibboleth.ContextFunctions.Scripted" factory-method="inlineScript"
          p:customObject-ref="uw.ComboBean">
       <constructor-arg>
           <value>
           <![CDATA[
               logger = Java.type("org.slf4j.LoggerFactory").getLogger("edu.washington.shibboleth");
               logger.debug("completeDuoBypass");
               request = custom.get("request");
               requestContext = input.getSubcontext("net.shibboleth.idp.profile.context.SpringRequestContext").getRequestContext();
        conversationScope = requestContext.getConversationScope();
        fp = conversationScope.get("fingerprint");
        logger.debug("== fingerprint: " + fp);
        fpt = conversationScope.get("fptime");
        logger.debug("== time: " + fpt);

               nextFlow = null;
               nextFlow;
           ]]>
       </value>
       </constructor-arg>
   </bean>
 -->
</beans>
