<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
                           
       default-init-method="initialize"
       default-destroy-method="destroy">


    <!-- Basic Login.  1 or 2-factor -->
    <util:map id="shibboleth.authn.MFA.TransitionMap">

        <!-- Always start with a basic password authn -->
        <entry key="">
            <bean parent="shibboleth.authn.MFA.Transition" p:nextFlow="authn/Password" />
        </entry>
        
        <!-- After authn/Password, next rule runs the Duo (uwduo) login flow as needed. -->
        <entry key="authn/Password">
            <bean parent="shibboleth.authn.MFA.Transition" p:nextFlowStrategy-ref="checkSecondFactorNeeded" />
        </entry>

        <!-- Following a Duo flow, check the 'remember me' toggle.  If duo login failed, it will be rerun. -->
        <entry key="authn/uwduo">
            <bean parent="shibboleth.authn.MFA.Transition" p:nextFlowStrategy-ref="checkRememberMe" />
        </entry>

        <!-- Run crn selections through the second factor checker.  -->
        <entry key="authn/crn-select">
            <bean parent="shibboleth.authn.MFA.Transition" p:nextFlowStrategy-ref="checkSecondFactorNeeded" />
        </entry>
        
        <!-- just for debug logging 
        <entry key="authn/duo-bypass">
            <bean parent="shibboleth.authn.MFA.Transition" p:nextFlowStrategy-ref="completeDuoBypass" />
        </entry>
         -->

        <!-- This should never happen.  (catch someone bypassing aws 2fa?) -->
        <entry key="authn/needduo">
            <bean parent="shibboleth.authn.MFA.Transition" p:nextFlow="authn/needduo" />
        </entry>

        <!-- An implicit final rule will return whatever the final flow returns. -->
    </util:map>

    <!-- After a successful Password flow, see if 2nd factor is needed.
         1) Token authn requested
         2) User opted into mfa and has no 'remember' cookie
       -->

    <bean id="checkSecondFactorNeeded" parent="shibboleth.ContextFunctions.Scripted" factory-method="inlineScript"
          p:customObject-ref="uw.ComboBean">
       <constructor-arg>
           <value>
           <![CDATA[
               var AuthnContextClassRefPrincipal = Java.type("net.shibboleth.idp.saml.authn.principal.AuthnContextClassRefPrincipal");
               var Cookie = Java.type("javax.servlet.http.Cookie");
               logger = Java.type("org.slf4j.LoggerFactory").getLogger("edu.washington.shibboleth");

               request = custom.get("request");
               webget = custom.get("webget");
               dynamic_info = custom.get("reuse");

               cookies = request.getCookies();
               nextFlow = null;
               need2f = null;
               hasCookie = "f";
               hasOptinCookie = null;
               needsOptinCookie = null;
               disusered = false;
               duoByOptinOnly = false;
               
               // Get the username
               CanonicalUsernameLookupStrategy = Java.type("net.shibboleth.idp.session.context.navigate.CanonicalUsernameLookupStrategy");
               culs = new CanonicalUsernameLookupStrategy();
               username = culs.apply(input);
               logger.debug("username = " + username);

               // Get a scope for variable transfer to views and beans
               requestContext = input.getSubcontext("net.shibboleth.idp.profile.context.SpringRequestContext").getRequestContext();
               conversationScope = requestContext.getConversationScope();

               conversationScope.put("remember_checked", null);
               conversationScope.put("duo_username", null);
               conversationScope.put("show_duo_username", null);
               conversationScope.put("needsOptinCookie", null);

               /* Get relying party id */ 
               var rpCtx = input.getSubcontext("net.shibboleth.idp.profile.context.RelyingPartyContext");
               var rpCtxId = rpCtx.getConfiguration().getId();
               rpid = rpCtx.relyingPartyId;
               logger.info("rpid = " + rpid);

               userSeq = "1";
               autoTokenRp = false;

               if (dynamic_info.isDisusered(username)) {
                  logger.info("User " + username + " is disusered!");
                  disusered = true;
               }
               if (dynamic_info.isAuto2fa(rpid)) {
                  logger.info("2fa suggested by autotoken: " + rpid);
                  autoTokenRp = true;
                  conversationScope.put("log_auto", "auto");
               }
               if (dynamic_info.isNo2fa(rpid)) {
                  logger.info("2fa denied by no-2fa: " + rpid);
                  need2f = 'f';
                  conversationScope.put("log_no2fa", "true");
               }

               resetTime = dynamic_info.getReuserTime(username);   // is zero for most users
               logger.info("User " + username + " resetTime = " + resetTime);

               if (dynamic_info.getZLink(rpid)!=null) {
                  conversationScope.put("authzhelplink", dynamic_info.getZLink(rpid));
                  logger.debug("SP " + rpid + " has zlink: " + dynamic_info.getZLink(rpid));
               }
               conversationScope.put("user_seq", userSeq);
               
               /* Check cookies.  See if the user has a long-term 2fa session.
                */

               var Long = Java.type("java.lang.Long");
               for ( i=0; cookies!=null && i< cookies.length; i++ ) {
                  cookie = cookies[i];
                  if (cookie.getName().equals("%{idp.uw.mfa-remember-cookie}" + username)) {
                     try {
                        val = custom.get("sealer").unwrap(cookie.getValue());
                        logger.debug("rememberme cookie value=" + val);
                        vals = val.split("|");
                        if (vals[1].equals(username) && ( Long.parseLong(vals[2])>resetTime)) {
                           hasCookie = "t";
                           conversationScope.put("log_2fa", "cookie");
                        }
                     } catch (e) {
                        if (e instanceof Java.type("net.shibboleth.utilities.java.support.security.DataExpiredException")) {
                            logger.debug("cookie has expired");
                            hasCookie = "e";
                        } else {
                           logger.debug(e);
                        }
                     }
                     conversationScope.put("remember_checked", "t");
                  }
                  if (cookie.getName().equals("%{idp.uw.mfa-optin-cookie}" + username)) {
                     logger.debug("has optin cookie");
                     hasOptinCookie = "t";
                     conversationScope.put("log_optin", "cookie");
                  }
               }
 
               /* See if token was requested, configured, or needed.
                     If this is an auto-2fa request AND a corresponding authz groups exists for the RP:
                        If the user is a member: 2fa required
                        Else no 2fa needed
                     Else 2fa required
                */

               // function to generate a group name from an entity id
               var rpToGroupUrlBase = function(id) {
                   // amazon 'special'
                   if (id.equals("urn:amazon:webservices")) return "%{idp.uw.aws-optin-2fa}"

                   // else use the id's dns part
                   if (id.indexOf("http://")==0) id = id.substring(7);
                   else if (id.indexOf("https://")==0) id = id.substring(8);
                   else if (id.indexOf("oidc/")==0) id = id.substring(5);
                   // else just make a safe name from the id
                   else id = id.toLowerCase().replaceAll("[^a-z0-9\\.\\-]", "-");
                   if (id.indexOf("/")>0) id = id.substring(0,id.indexOf("/"));
                   // logger.debug("fixed dns: " + id);
                   return "%{idp.uw.2fa-gws-urlbase}" + id + "/effective_member/"
               }

                 
               authCtx = input.getSubcontext("net.shibboleth.idp.authn.context.AuthenticationContext");
               rpCtx = authCtx.getSubcontext("net.shibboleth.idp.authn.context.RequestedPrincipalContext");
                     
               // See if 2fa requested.
               if (rpCtx != null) {
                  rps = rpCtx.getRequestedPrincipals();
                  var rqp = "";
                  for (i=0; i<rps.size(); i++) {
                     rpname = rps.get(i).getName();
                     if (rqp.length()>0) rqp = rqp + ",";
                     rqp = rqp + rpname;
                     if (rpname.equals("https://refeds.org/profile/mfa") || 
                         rpname.equals("urn:oasis:names:tc:SAML:2.0:ac:classes:TimeSyncToken")) { 
                           logger.debug("2fa requested by " + rpname);
                           need2f = 't';   // this overrides the no2fa flag
                           break;
                     }
                  }
                  conversationScope.put("log_rqp", rqp);
                }
         
                // var rpCtx = input.getSubcontext("net.shibboleth.idp.profile.context.RelyingPartyContext");
                // var rpCtxId = rpCtx.getConfiguration().getId();
                // rpid = rpCtx.relyingPartyId;

                // if user has optin cookie, that's the same as in optin group
                if (need2f==null && hasOptinCookie=="t") need2f = 't';

                // If 2fa auto triggered, see if user really needs it ( config token + group exists + not a member = no 2fa needed )
                if (need2f == null && autoTokenRp) {
                      logger.info("2fa by autotoken: " + rpid);
                      need2f = 't';
                      try {
                          url = rpToGroupUrlBase(rpid) + username;
                          logger.debug("member url = " + url);
                          rsp = webget.getResource(url)
                          // logger.debug("rsp = " + rsp);
                          if (rsp != null) {
                              var Json = Java.type("javax.json.Json");
                              var SR = Java.type("java.io.StringReader");
                              var reader = Json.createReader(new SR(rsp));
                              var jresp = reader.readObject();
                              reader.close();
                              // distinguish between 'group not found'=>need 2fa and 'member not found'=>no 2fa
                              errors = jresp.getJsonArray("errors");
                              if (errors != null && errors.size()>0) {
                                 substat = errors[0].getString("subStatus");
                                 logger.debug("substatus = " + substat);
                                 if (substat.equals("m404")) {
                                    logger.debug("group exists. member not found");
                                    need2f = null;
                                    conversationScope.put("log_auto", "notmember");
                                 }
                              } else { // no errors; group found and user is a member
                                 conversationScope.put("log_auto", "member");
                              }
                          }
                      } catch (e) {
                          logger.warn("Member request failed for user '{}': {}", username, e);
                      }
                }

                // function to test if a userid is in a group
                var userInGroup = function(url) {
                   try {
                      logger.debug(".. looking for " + url);
                      rsp = webget.getResource(url)
                      if (rsp != null) {
                         var Json = Java.type("javax.json.Json");
                         var SR = Java.type("java.io.StringReader");
                         var reader = Json.createReader(new SR(rsp));
                         var jresp = reader.readObject();
                         reader.close();
                         data = jresp.getJsonArray("data");
                         if (data != null && data.size()>0) {  // assume this means user is in group
                            return true;
                         }
                      }
                   } catch (e) {
                      logger.warn("optin request failed for user '{}': {}", username, e);
                   }
                   return false;
                }

                // See if user opted in to 2nd factor and has no long-term session
                if (need2f == null && hasCookie!="t") {

                   url = "%{idp.uw.2fa-optin-urlbase}" + username 
                   if (userInGroup(url)) {
                      conversationScope.put("log_optin", "optin");
                      // verify user 'really' in group
                      url2 = "%{idp.uw.2fa-optout-urlbase}" + username 
                      if (!userInGroup(url2)) {
                         need2f = 't';
                         needsOptinCookie = 't';
                         conversationScope.put("needsOptinCookie", "t");
                         duoByOptinOnly = true;
                         logger.info("user opts in to 2fa");
                      } else {
                         logger.info("user opts out of 2fa");
                         conversationScope.put("log_optin", "optout");
                      }
                   }
                }
  
                // If user has remember-me, skip 2fa
                if (hasCookie == "t") {
                   if (authCtx.isForceAuthn()) {
                      logger.info("2FA: force authn.  skipping remember cookie test");
                   } else {
                      logger.info("2FA: user has remember cookie.  skipping duo");
                      need2f = null;   
                      nextFlow = "authn/duo-bypass";
                      conversationScope.put("log_2famethod", "cookie");
                   }
                }

               // If 2nd factor needed, several choices
               // Complicated by CRN possibilities
               // If this is a return from crn selector duo_crn_username will be set

               if (need2f == 't') {
                  var Json = Java.type("javax.json.Json");
                  var SR = Java.type("java.io.StringReader");
                  var Http = Java.type("com.duosecurity.client.Http");

                  // function to test if a userid has Duo enrollment
                  var userHasDuo = function(id) {
                     try {
                        var request = new Http("POST", "%{uw.idp.duo.api.apiHost:null}", "/auth/v2/preauth", 10);
                        request.addParam("username", id);
                        request.signRequest("%{uw.idp.duo.api.integrationKey:null}", "%{uw.idp.duo.api.secretKey:null}");

                        ret = request.executeHttpRequest();
                        var rsp = ret.body().string();
                        logger.debug("duoresponse body = {}", rsp);
                        var reader = Json.createReader(new SR(rsp));
                        var jresp = reader.readObject();
                        reader.close();
                        var d_stat = jresp.getString("stat");
                        response = jresp.getJsonObject("response");
                        var d_result = response.getString("result");
                        logger.debug("duo query result = {}", d_result);
                        if (d_result.equals("auth") && d_stat.equals("OK")) return true;
                     } catch (e) {
                        logger.warn("Duo request failed for user '{}': {}", id, e);
                     }
                     return false;
                  }

                  // function to get a TAWS preauth array
                  var getTawsPreauth = function(id) {
                     try {
                        rsp = webget.getResource("%{idp.uw.token-preauth-urlbase:null}" + id);
                        logger.debug("taws rsp=" + rsp);
                        var reader = Json.createReader(new SR(rsp));
                        var jresp = reader.readObject();
                        reader.close();
                        return jresp.getJsonArray("preauth");
                     } catch (e) {
                        logger.warn("Taws request failed for user '{}': {}", id, e);
                     }
                     return null;
                  }

                  // function to see if taws resp has vendor
                  var hasTawsVendor = function(devs, vendor, flow) {
                     for ( i=0; i< devs.size(); i++ ) {
                        dev = devs.getJsonObject(i);
                        if (dev.getString("vendor","").equals(vendor) && dev.getString("result","").equals("auth") ) {
                           duser = dev.getString("user");
                           logger.info("Found " + vendor + " identity for " + duser);
                           conversationScope.put("duo_username", duser);
                           return flow;
                        }
                     }
                     return null;
                  }

                  try {
                     // most users will have Duo
                     // in case of CRN usage, duo_realuser=logging in user,  duo_username=id that has duo identity
                     conversationScope.put("duo_realuser", username);
                     if (userHasDuo(username)) {
                        logger.info("Choosing Duo for 2f");
                        conversationScope.put("duo_username", username);
                        nextFlow = "authn/uwduo";
                     } else {
                        // user may have CRN entry
                        // this stuff runs rarely
                        try {
                           var devs = getTawsPreauth(username);
                           var Vector = Java.type("java.util.Vector");
                           var String = Java.type("java.lang.String");
                           conversationScope.put("show_duo_username", true);

                           // first possibility: simple single CRN.  We get back user with duo 
                           // this is the more common case

                           nextFlow = hasTawsVendor(devs, "duo", "authn/uwduo");

                           // other possibility: bunch of CRN 
                           // this happens once in a blue moon
                           if (nextFlow == null) {
                              for ( i=0; i< devs.size(); i++ ) {
                                 prompt = dev.getJsonObject("prompt")
                                 if (prompt==null) continue;
                                 duser = conversationScope.get("duo_crn_username");  // in case we've come back from a crn selection
                                 logger.info("multiple crn pre-choice: " + duser);
                                 crns = prompt.getJsonObject("crns");
                                 logger.info(crns);
                                 if (crns==null) continue
                                 logger.info("multiple crn to choose from");
                                 // save username to the display page
                                 conversationScope.put("real_user", username);
                                 crnlist = new Vector();
                                 for ( j=1; j<crns.size(); j++) {
                                    crn = crns.getString(j, null);
                                    if (crn==null) break;
                                    if (crn.equals(duser)) {  // if already selected, go with it
                                        var pdevs = getTawsPreauth(duser);
                                        nextFlow = hasTawsVendor(pdevs, "duo", "authn/uwduo");
                                        if (nextFlow != null) break;
                                    }
                                    logger.info("adding: " + crn);
                                    crnlist.add(crn);
                                 }
                                 conversationScope.put("crnlist", crnlist);
                                 if (nextFlow==null) nextFlow = "authn/crn-select"
                              }
                           }
                        } catch (e) {
                           logger.warn("Taws CRN error for user '{}': {}", username, e);
                           conversationScope.put("duo_username", username);
                           nextFlow = "authn/uwduo";
                        }
                     }
                  } catch (e) {
                     logger.warn("Duo requests failed for user '{}': {}", username, e);
                  }

                  // If no 2f found, suggest duo enrollment - form w/o iframe
                  if (nextFlow == null) {
                     if (duoByOptinOnly && ( rpid.equals("https://identity.uw.edu/shibboleth") ||
                                             rpid.equals("https://identity-tom.iamdev.s.uw.edu/saml") ||
                                             rpid.equals("https://diafine5.s.uw.edu/shibboleth") ) ) {
                        logger.info("User optin but no Duo and SP is Identity. Skipping 2fa.");
                     } else {
                        logger.info("Using Duo for 2f notification.");
                        nextFlow = "authn/needduo";
                        // clear any bogus optin
                        if (hasOptinCookie=="t") {
                           logger.info("clearing bogus optin cookie");
                           cookie = new Cookie("%{idp.uw.mfa-optin-cookie}" + username, "xxx");
                           cookie.setPath("/");
                           cookie.setSecure(true);
                           cookie.setHttpOnly(true);
                           cookie.setMaxAge(0);  // delete
                           response = custom.get("response");
                           response.addCookie(cookie);
                        }
                     }
                  }
               } // end need2f
               if (nextFlow != null && nextFlow.equals("authn/uwduo"))  conversationScope.put("log_2famethod", "duo");

               if (disusered) nextFlow = "authn/disusered";
               
               // if 2FA not required, check if 2FA will be required soon, if so prompt the user to opt in
               if (need2f != 't') {
                 url = "%{idp.uw.2fa-optin-soon-urlbase}" + username;
                 if (userInGroup(url)) {
                     // check if the user is opted out
                     url = "%{idp.uw.2fa-optout-urlbase}" + username;
                     if (!userInGroup(url)) {
                         nextFlow = "authn/duo-soon";
                     }
                 }
               }
               logger.debug("leaving, nextFlow=" + nextFlow);
               nextFlow;
           ]]>
       </value>
       </constructor-arg>
   </bean>

    <!-- Finish A Duo authn.  Check for rememberme -->
    <bean id="checkRememberMe" parent="shibboleth.ContextFunctions.Scripted" factory-method="inlineScript"
          p:customObject-ref="uw.ComboBean">
       <constructor-arg>
           <value>
           <![CDATA[
               var AuthnContextClassRefPrincipal = Java.type("net.shibboleth.idp.saml.authn.principal.AuthnContextClassRefPrincipal");
               logger = Java.type("org.slf4j.LoggerFactory").getLogger("edu.washington.shibboleth");
               logger.debug("checkRememberMe");
               nextFlow = null;

               // if duo failed, rerun
               requestContext = input.getSubcontext("net.shibboleth.idp.profile.context.SpringRequestContext").getRequestContext();
               currentEvent = requestContext.getCurrentEvent().toString();
               logger.debug("duo status = " + currentEvent);
               if (currentEvent.equals("ReselectFlow") || currentEvent.equals("NoCredentials")) nextFlow = "authn/uwduo";

               if (nextFlow==null) {
                  CanonicalUsernameLookupStrategy = Java.type("net.shibboleth.idp.session.context.navigate.CanonicalUsernameLookupStrategy");
                  culs = new CanonicalUsernameLookupStrategy();
                  username = culs.apply(input);
   
                  // set or delete cookie, depends on rememberme checked

                  remme = requestContext.getConversationScope().get("rememberme");
                  logger.debug("check rememberme username = " + username + ", remme=" + remme + ".");
                  cname = requestContext.getConversationScope().get("duo_realuser");
                  needsOptin = requestContext.getConversationScope().get("needsOptinCookie");
                  if (!username.equals(cname)) {
                     logger.info("using cookie for: " + cname);
                     username = cname;
                  }

                  var maxAge = 0;
                  if (remme!=null && remme.equals("y")) maxAge = %{idp.uw.mfa-remember-seconds};
                  var Random = Java.type("java.util.Random");
                  var Cookie = Java.type("javax.servlet.http.Cookie");
                  var Instant = Java.type("java.time.Instant");
                  var uNow = Instant.now().getEpochSecond();
                  tdata = new Random().nextInt(1000000) + "|" + username + "|" + uNow;
                  logger.debug("rcookie=" + tdata);
                  cdata = custom.get("sealer").wrap(tdata, Instant.ofEpochMilli(uNow*1000 + %{idp.uw.mfa-remember-seconds}*1000));
                  cookie = new Cookie("%{idp.uw.mfa-remember-cookie}" + username, cdata);
                  cookie.setPath("/");
                  cookie.setSecure(true);
                  cookie.setHttpOnly(true);
                  cookie.setMaxAge(maxAge);
                  response = custom.get("response");
                  response.addCookie(cookie);

                  // set optin as needed
                  if (needsOptin!=null) {
                     logger.info("setting optin cookie");
                     cookie = new Cookie("%{idp.uw.mfa-optin-cookie}" + username, "yes");
                     cookie.setPath("/");
                     cookie.setSecure(true);
                     cookie.setHttpOnly(true);
                     cookie.setMaxAge(31104000);  // 1 year
                     response.addCookie(cookie);
                  }
               }
               nextFlow;
           ]]>
       </value>
       </constructor-arg>
   </bean>

    <!-- this just for logging debug 
    <bean id="completeDuoBypass" parent="shibboleth.ContextFunctions.Scripted" factory-method="inlineScript"
          p:customObject-ref="uw.ComboBean">
       <constructor-arg>
           <value>
           <![CDATA[
               logger = Java.type("org.slf4j.LoggerFactory").getLogger("edu.washington.shibboleth");
               logger.debug("completeDuoBypass");
               request = custom.get("request");
               requestContext = input.getSubcontext("net.shibboleth.idp.profile.context.SpringRequestContext").getRequestContext();
        conversationScope = requestContext.getConversationScope();
        fp = conversationScope.get("fingerprint");
        logger.debug("== fingerprint: " + fp);
        fpt = conversationScope.get("fptime");
        logger.debug("== time: " + fpt);

               nextFlow = null;
               nextFlow;
           ]]>
       </value>
       </constructor-arg>
   </bean>
 -->
</beans>
